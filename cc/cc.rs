#[path = "../misc/common/common.rs"]
mod common;
use common::*;

mod codegen;
mod parse;
mod preprocess;

fn main() {
  let args: Vec<String> = std::env::args().collect();
  if args.len() != 3 {
    println!("CC: Usage: cc <C source file> <assembly output file>");
    std::process::exit(1);
  }

  let c_source_file = &args[1];
  let assembly_output_file = &args[2];

  let input: String = std::fs::read_to_string(c_source_file).unwrap_or_else(|_| {
    println!("CC: Error: Unable to read file `{}`", c_source_file);
    std::process::exit(1);
  });

  let preprocessed: String = preprocess::preprocess(input).unwrap_or_else(|e| {
    println!("CC: Error: {}", e);
    std::process::exit(1);
  });

  let program: Program = parse::parse(preprocessed).unwrap_or_else(|e| {
    println!("CC: Error: {}", e);
    std::process::exit(1);
  });

  println!("{:#?}", program);

  let tokens: Vec<Token> = codegen::codegen(program, "main").unwrap_or_else(|e| {
    println!("CC: Error: {}", e);
    std::process::exit(1);
  });

  let mnemonics: Vec<Mnemonic> = tokens.into_iter().map(common::token_to_mnemonic).collect();

  let assembly: String = mnemonics
    .into_iter()
    .map(|mnemonic| mnemonic.to_string())
    .collect::<Vec<String>>()
    .join(" ");

  // TODO import stdlib properly
  let assembly = format!(
    "@ lib/core.asm\nmul! @err div! @err mod! @err\n{}",
    assembly
  );

  let assembly = format!("# Generated by CC\n\n{}", assembly);

  std::fs::write(assembly_output_file, assembly).unwrap();

  println!("CC: Done");
}

#[derive(Clone, Debug)]
pub struct Type;

#[derive(Clone, Debug)]
pub struct Program {
  function_definitions: Vec<FunctionDefinition>,
}

#[derive(Clone, Debug)]
pub enum Expression {
  Addition(Box<Expression>, Box<Expression>),
  Subtraction(Box<Expression>, Box<Expression>),
  Multiplication(Box<Expression>, Box<Expression>),
  Division(Box<Expression>, Box<Expression>),
  Modulo(Box<Expression>, Box<Expression>),
  Negation(Box<Expression>),
  BitwiseComplement(Box<Expression>),
  LogicalNegation(Box<Expression>),
  Cast(Type, Box<Expression>),
  IntegerConstant(u8),
}

#[derive(Clone, Debug)]
pub enum Statement {
  Expression(Expression),
  MagicReturn(Expression),
}

#[derive(Clone, Debug)]
pub struct FunctionDefinition {
  name: String,
  body: Vec<Statement>,
}
