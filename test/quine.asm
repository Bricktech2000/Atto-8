# constructive quine; outputs the data buffer `str` as-is then outputs its reconstruction.
# data buffer is generated by passing every line of code up to `str:` through `str2asm.asm`
# then joining the outputs with `@0D @0A` to ensure the carriage is returned

@ lib/core.asm
@ lib/types.asm
@ lib/stdio.asm
main! :str !puts :str loop: ld0 lda !char.null ld1 !u8.to_hex x40 x20 !stack_puts !zr inc :loop !bcc !hlt str: @40 @20 @6C @69 @62 @2F @63 @6F @72 @65 @2E @61 @73 @6D @0D @0A @40 @20 @6C @69 @62 @2F @74 @79 @70 @65 @73 @2E @61 @73 @6D @0D @0A @40 @20 @6C @69 @62 @2F @73 @74 @64 @69 @6F @2E @61 @73 @6D @0D @0A @6D @61 @69 @6E @21 @20 @3A @73 @74 @72 @20 @21 @70 @75 @74 @73 @20 @3A @73 @74 @72 @20 @6C @6F @6F @70 @3A @20 @6C @64 @30 @20 @6C @64 @61 @20 @21 @63 @68 @61 @72 @2E @6E @75 @6C @6C @20 @6C @64 @31 @20 @21 @75 @38 @2E @74 @6F @5F @68 @65 @78 @20 @78 @34 @30 @20 @78 @32 @30 @20 @21 @73 @74 @61 @63 @6B @5F @70 @75 @74 @73 @20 @21 @7A @72 @20 @69 @6E @63 @20 @3A @6C @6F @6F @70 @20 @21 @62 @63 @63 @20 @21 @68 @6C @74 @20 @73 @74 @72 @3A @00
